
PROYECTO_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00000cee  00000d82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800162  00800162  00000de4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000e58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144c  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000958  00000000  00000000  000023bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a73  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  00003788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055b  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd8  00000000  00000000  00003fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e6       	ldi	r26, 0x62	; 98
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 36       	cpi	r26, 0x68	; 104
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  9e:	0c 94 75 06 	jmp	0xcea	; 0xcea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <valorADC>:
	}
}

void WriteUART(char caracter){
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = caracter;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	90 7f       	andi	r25, 0xF0	; 240
  ae:	90 83       	st	Z, r25
  b0:	90 81       	ld	r25, Z
  b2:	89 2b       	or	r24, r25
  b4:	80 83       	st	Z, r24
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c4:	86 fd       	sbrc	r24, 6
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <valorADC+0x1a>
  c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	08 95       	ret

000000d0 <initADC>:
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	8f 77       	andi	r24, 0x7F	; 127
  e0:	80 83       	st	Z, r24
  e2:	80 81       	ld	r24, Z
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	80 83       	st	Z, r24
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	80 83       	st	Z, r24
  f4:	80 81       	ld	r24, Z
  f6:	83 60       	ori	r24, 0x03	; 3
  f8:	80 83       	st	Z, r24
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 62       	ori	r24, 0x20	; 32
 102:	80 83       	st	Z, r24
 104:	80 81       	ld	r24, Z
 106:	80 61       	ori	r24, 0x10	; 16
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <initUART9600>:
 10c:	8a b1       	in	r24, 0x0a	; 10
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	8a b9       	out	0x0a, r24	; 10
 112:	8a b1       	in	r24, 0x0a	; 10
 114:	82 60       	ori	r24, 0x02	; 2
 116:	8a b9       	out	0x0a, r24	; 10
 118:	e0 ec       	ldi	r30, 0xC0	; 192
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
 124:	e1 ec       	ldi	r30, 0xC1	; 193
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	10 82       	st	Z, r1
 12a:	80 81       	ld	r24, Z
 12c:	88 69       	ori	r24, 0x98	; 152
 12e:	80 83       	st	Z, r24
 130:	e2 ec       	ldi	r30, 0xC2	; 194
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	10 82       	st	Z, r1
 136:	80 81       	ld	r24, Z
 138:	86 60       	ori	r24, 0x06	; 6
 13a:	80 83       	st	Z, r24
 13c:	8f ec       	ldi	r24, 0xCF	; 207
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 144:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 148:	08 95       	ret

0000014a <WriteMessage>:
 14a:	ac 01       	movw	r20, r24
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	07 c0       	rjmp	.+14     	; 0x15e <WriteMessage+0x14>
 150:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 154:	95 ff       	sbrs	r25, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <WriteMessage+0x6>
 158:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	fa 01       	movw	r30, r20
 160:	e2 0f       	add	r30, r18
 162:	f1 1d       	adc	r31, r1
 164:	30 81       	ld	r19, Z
 166:	31 11       	cpse	r19, r1
 168:	f3 cf       	rjmp	.-26     	; 0x150 <WriteMessage+0x6>
 16a:	08 95       	ret

0000016c <main>:
 16c:	f8 94       	cli
 16e:	8a b1       	in	r24, 0x0a	; 10
 170:	80 69       	ori	r24, 0x90	; 144
 172:	8a b9       	out	0x0a, r24	; 10
 174:	84 b1       	in	r24, 0x04	; 4
 176:	81 60       	ori	r24, 0x01	; 1
 178:	84 b9       	out	0x04, r24	; 4
 17a:	8a b1       	in	r24, 0x0a	; 10
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	8a b9       	out	0x0a, r24	; 10
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	84 60       	ori	r24, 0x04	; 4
 184:	8b b9       	out	0x0b, r24	; 11
 186:	84 b1       	in	r24, 0x04	; 4
 188:	8f 7d       	andi	r24, 0xDF	; 223
 18a:	84 b9       	out	0x04, r24	; 4
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	80 62       	ori	r24, 0x20	; 32
 190:	85 b9       	out	0x05, r24	; 5
 192:	87 b1       	in	r24, 0x07	; 7
 194:	8e 7f       	andi	r24, 0xFE	; 254
 196:	87 b9       	out	0x07, r24	; 7
 198:	88 b1       	in	r24, 0x08	; 8
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	88 b9       	out	0x08, r24	; 8
 19e:	87 b1       	in	r24, 0x07	; 7
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	87 b9       	out	0x07, r24	; 7
 1a4:	88 b1       	in	r24, 0x08	; 8
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	88 b9       	out	0x08, r24	; 8
 1aa:	87 b1       	in	r24, 0x07	; 7
 1ac:	8b 7f       	andi	r24, 0xFB	; 251
 1ae:	87 b9       	out	0x07, r24	; 7
 1b0:	88 b1       	in	r24, 0x08	; 8
 1b2:	84 60       	ori	r24, 0x04	; 4
 1b4:	88 b9       	out	0x08, r24	; 8
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	8d bb       	out	0x1d, r24	; 29
 1c0:	1c ba       	out	0x1c, r1	; 28
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	74 e0       	ldi	r23, 0x04	; 4
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 b9 02 	call	0x572	; 0x572 <initPWM0FastA0>
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	74 e0       	ldi	r23, 0x04	; 4
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 cf 02 	call	0x59e	; 0x59e <initPWM0FastB0>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	74 e0       	ldi	r23, 0x04	; 4
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 ae 03 	call	0x75c	; 0x75c <initPWM0FastA2>
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	74 e0       	ldi	r23, 0x04	; 4
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 cc 03 	call	0x798	; 0x798 <initPWM0FastB2>
 1ea:	0e 94 68 00 	call	0xd0	; 0xd0 <initADC>
 1ee:	0e 94 86 00 	call	0x10c	; 0x10c <initUART9600>
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 20a:	78 94       	sei
 20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 210:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	91 05       	cpc	r25, r1
 218:	09 f0       	breq	.+2      	; 0x21c <main+0xb0>
 21a:	4e c0       	rjmp	.+156    	; 0x2b8 <main+0x14c>
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	85 b9       	out	0x05, r24	; 5
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	8f 77       	andi	r24, 0x7F	; 127
 226:	8b b9       	out	0x0b, r24	; 11
 228:	8b b1       	in	r24, 0x0b	; 11
 22a:	8f 7e       	andi	r24, 0xEF	; 239
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 234:	0e 94 e5 02 	call	0x5ca	; 0x5ca <updateDutyCycleA0>
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	83 ec       	ldi	r24, 0xC3	; 195
 23c:	99 e0       	ldi	r25, 0x09	; 9
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0xd2>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0xdc>
 248:	00 00       	nop
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 250:	0e 94 1a 03 	call	0x634	; 0x634 <updateDutyCycleB0>
 254:	ef ef       	ldi	r30, 0xFF	; 255
 256:	f3 ec       	ldi	r31, 0xC3	; 195
 258:	29 e0       	ldi	r18, 0x09	; 9
 25a:	e1 50       	subi	r30, 0x01	; 1
 25c:	f0 40       	sbci	r31, 0x00	; 0
 25e:	20 40       	sbci	r18, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0xee>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0xf8>
 264:	00 00       	nop
 266:	85 e0       	ldi	r24, 0x05	; 5
 268:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 26c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <updateDutyCycleA2>
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	93 ec       	ldi	r25, 0xC3	; 195
 274:	e9 e0       	ldi	r30, 0x09	; 9
 276:	81 50       	subi	r24, 0x01	; 1
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e0 40       	sbci	r30, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x10a>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x114>
 280:	00 00       	nop
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 288:	0e 94 20 04 	call	0x840	; 0x840 <updateDutyCycleB2>
 28c:	ff ef       	ldi	r31, 0xFF	; 255
 28e:	23 ec       	ldi	r18, 0xC3	; 195
 290:	89 e0       	ldi	r24, 0x09	; 9
 292:	f1 50       	subi	r31, 0x01	; 1
 294:	20 40       	sbci	r18, 0x00	; 0
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x126>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <main+0x130>
 29c:	00 00       	nop
 29e:	9f e7       	ldi	r25, 0x7F	; 127
 2a0:	e8 e3       	ldi	r30, 0x38	; 56
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
 2a4:	91 50       	subi	r25, 0x01	; 1
 2a6:	e0 40       	sbci	r30, 0x00	; 0
 2a8:	f0 40       	sbci	r31, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x138>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x142>
 2ae:	00 00       	nop
 2b0:	80 e3       	ldi	r24, 0x30	; 48
 2b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bufferRX>
 2b6:	aa cf       	rjmp	.-172    	; 0x20c <main+0xa0>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	91 05       	cpc	r25, r1
 2bc:	d1 f5       	brne	.+116    	; 0x332 <main+0x1c6>
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	8e 7f       	andi	r24, 0xFE	; 254
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	8b b9       	out	0x0b, r24	; 11
 2ca:	8b b1       	in	r24, 0x0b	; 11
 2cc:	8f 7e       	andi	r24, 0xEF	; 239
 2ce:	8b b9       	out	0x0b, r24	; 11
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 a5 00 	call	0x14a	; 0x14a <WriteMessage>
 2d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bufferRX>
 2dc:	81 33       	cpi	r24, 0x31	; 49
 2de:	39 f4       	brne	.+14     	; 0x2ee <main+0x182>
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <updateDutyCycleA0>
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	0e 94 1a 03 	call	0x634	; 0x634 <updateDutyCycleB0>
 2ec:	8f cf       	rjmp	.-226    	; 0x20c <main+0xa0>
 2ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bufferRX>
 2f2:	82 33       	cpi	r24, 0x32	; 50
 2f4:	39 f4       	brne	.+14     	; 0x304 <main+0x198>
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <updateDutyCycleA0>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 1a 03 	call	0x634	; 0x634 <updateDutyCycleB0>
 302:	84 cf       	rjmp	.-248    	; 0x20c <main+0xa0>
 304:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bufferRX>
 308:	83 33       	cpi	r24, 0x33	; 51
 30a:	39 f4       	brne	.+14     	; 0x31a <main+0x1ae>
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <updateDutyCycleA2>
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	0e 94 20 04 	call	0x840	; 0x840 <updateDutyCycleB2>
 318:	79 cf       	rjmp	.-270    	; 0x20c <main+0xa0>
 31a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bufferRX>
 31e:	84 33       	cpi	r24, 0x34	; 52
 320:	09 f0       	breq	.+2      	; 0x324 <main+0x1b8>
 322:	74 cf       	rjmp	.-280    	; 0x20c <main+0xa0>
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <updateDutyCycleA2>
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 20 04 	call	0x840	; 0x840 <updateDutyCycleB2>
 330:	6d cf       	rjmp	.-294    	; 0x20c <main+0xa0>
 332:	83 30       	cpi	r24, 0x03	; 3
 334:	91 05       	cpc	r25, r1
 336:	09 f0       	breq	.+2      	; 0x33a <main+0x1ce>
 338:	46 c0       	rjmp	.+140    	; 0x3c6 <main+0x25a>
 33a:	85 b1       	in	r24, 0x05	; 5
 33c:	8e 7f       	andi	r24, 0xFE	; 254
 33e:	85 b9       	out	0x05, r24	; 5
 340:	8b b1       	in	r24, 0x0b	; 11
 342:	8f 77       	andi	r24, 0x7F	; 127
 344:	8b b9       	out	0x0b, r24	; 11
 346:	8b b1       	in	r24, 0x0b	; 11
 348:	80 61       	ori	r24, 0x10	; 16
 34a:	8b b9       	out	0x0b, r24	; 11
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 352:	ef e3       	ldi	r30, 0x3F	; 63
 354:	fc e9       	ldi	r31, 0x9C	; 156
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0x1ea>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x1f0>
 35c:	00 00       	nop
 35e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <updateDutyCycleA0>
 362:	87 e0       	ldi	r24, 0x07	; 7
 364:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 368:	ef e3       	ldi	r30, 0x3F	; 63
 36a:	fc e9       	ldi	r31, 0x9C	; 156
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <main+0x200>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x206>
 372:	00 00       	nop
 374:	0e 94 1a 03 	call	0x634	; 0x634 <updateDutyCycleB0>
 378:	85 e0       	ldi	r24, 0x05	; 5
 37a:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 37e:	c8 2f       	mov	r28, r24
 380:	8f e3       	ldi	r24, 0x3F	; 63
 382:	9c e9       	ldi	r25, 0x9C	; 156
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <main+0x218>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x21e>
 38a:	00 00       	nop
 38c:	8c 2f       	mov	r24, r28
 38e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <updateDutyCycleA2>
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	0e 94 53 00 	call	0xa6	; 0xa6 <valorADC>
 398:	ef e3       	ldi	r30, 0x3F	; 63
 39a:	fc e9       	ldi	r31, 0x9C	; 156
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <main+0x230>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x236>
 3a2:	00 00       	nop
 3a4:	0e 94 20 04 	call	0x840	; 0x840 <updateDutyCycleB2>
 3a8:	ff e7       	ldi	r31, 0x7F	; 127
 3aa:	28 e3       	ldi	r18, 0x38	; 56
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	f1 50       	subi	r31, 0x01	; 1
 3b0:	20 40       	sbci	r18, 0x00	; 0
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x242>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0x24c>
 3b8:	00 00       	nop
 3ba:	6c 2f       	mov	r22, r28
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_write_byte>
 3c4:	23 cf       	rjmp	.-442    	; 0x20c <main+0xa0>
 3c6:	04 97       	sbiw	r24, 0x04	; 4
 3c8:	09 f0       	breq	.+2      	; 0x3cc <main+0x260>
 3ca:	20 cf       	rjmp	.-448    	; 0x20c <main+0xa0>
 3cc:	85 b1       	in	r24, 0x05	; 5
 3ce:	8e 7f       	andi	r24, 0xFE	; 254
 3d0:	85 b9       	out	0x05, r24	; 5
 3d2:	8b b1       	in	r24, 0x0b	; 11
 3d4:	80 68       	ori	r24, 0x80	; 128
 3d6:	8b b9       	out	0x0b, r24	; 11
 3d8:	8b b1       	in	r24, 0x0b	; 11
 3da:	80 61       	ori	r24, 0x10	; 16
 3dc:	8b b9       	out	0x0b, r24	; 11
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_read_byte>
 3e6:	c8 2f       	mov	r28, r24
 3e8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <servo1>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_read_byte>
 3f4:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <servo2>
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_read_byte>
 400:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
 404:	84 e0       	ldi	r24, 0x04	; 4
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_read_byte>
 40c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <servo4>
 410:	8c 2f       	mov	r24, r28
 412:	0e 94 e5 02 	call	0x5ca	; 0x5ca <updateDutyCycleA0>
 416:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <servo2>
 41a:	0e 94 1a 03 	call	0x634	; 0x634 <updateDutyCycleB0>
 41e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
 422:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <updateDutyCycleA2>
 426:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <servo4>
 42a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <updateDutyCycleA2>
 42e:	ee ce       	rjmp	.-548    	; 0x20c <main+0xa0>

00000430 <__vector_1>:
}

ISR(INT0_vect){
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
	seleccion++;
 440:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 444:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 44e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(seleccion>=5){
 452:	05 97       	sbiw	r24, 0x05	; 5
 454:	34 f0       	brlt	.+12     	; 0x462 <__vector_1+0x32>
		seleccion = 1;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 45e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	81 ee       	ldi	r24, 0xE1	; 225
 466:	94 e0       	ldi	r25, 0x04	; 4
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <__vector_1+0x38>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__vector_1+0x42>
 472:	00 00       	nop
	}
	_delay_ms(100);
}
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	2f 91       	pop	r18
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <__vector_18>:

ISR(USART_RX_vect){
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	8f 93       	push	r24
	bufferRX = UDR0;
 490:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 494:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bufferRX>
	
	while(!(UCSR0A & (1<<UDRE0)));
 498:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 49c:	85 ff       	sbrs	r24, 5
 49e:	fc cf       	rjmp	.-8      	; 0x498 <__vector_18+0x14>
	UDR0 = bufferRX;
 4a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bufferRX>
 4a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 4a8:	8f 91       	pop	r24
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <map0>:
#include <avr/io.h>
#include <stdint.h>
#include "PWM0.h"

float map0(float duty, float Imin, float Imax, float Omin, float Omax){
 4b4:	4f 92       	push	r4
 4b6:	5f 92       	push	r5
 4b8:	6f 92       	push	r6
 4ba:	7f 92       	push	r7
 4bc:	af 92       	push	r10
 4be:	bf 92       	push	r11
 4c0:	cf 92       	push	r12
 4c2:	df 92       	push	r13
 4c4:	ef 92       	push	r14
 4c6:	ff 92       	push	r15
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	28 97       	sbiw	r28, 0x08	; 8
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	cd bf       	out	0x3d, r28	; 61
 4e0:	29 01       	movw	r4, r18
 4e2:	3a 01       	movw	r6, r20
 4e4:	ed 82       	std	Y+5, r14	; 0x05
 4e6:	fe 82       	std	Y+6, r15	; 0x06
 4e8:	0f 83       	std	Y+7, r16	; 0x07
 4ea:	18 87       	std	Y+8, r17	; 0x08
	return ((duty - Imin)*(Omax - Omin)/(Imax - Imin)) + Omin;
 4ec:	0e 94 56 04 	call	0x8ac	; 0x8ac <__subsf3>
 4f0:	69 83       	std	Y+1, r22	; 0x01
 4f2:	7a 83       	std	Y+2, r23	; 0x02
 4f4:	8b 83       	std	Y+3, r24	; 0x03
 4f6:	9c 83       	std	Y+4, r25	; 0x04
 4f8:	a6 01       	movw	r20, r12
 4fa:	95 01       	movw	r18, r10
 4fc:	69 8d       	ldd	r22, Y+25	; 0x19
 4fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
 500:	8b 8d       	ldd	r24, Y+27	; 0x1b
 502:	9c 8d       	ldd	r25, Y+28	; 0x1c
 504:	0e 94 56 04 	call	0x8ac	; 0x8ac <__subsf3>
 508:	9b 01       	movw	r18, r22
 50a:	ac 01       	movw	r20, r24
 50c:	69 81       	ldd	r22, Y+1	; 0x01
 50e:	7a 81       	ldd	r23, Y+2	; 0x02
 510:	8b 81       	ldd	r24, Y+3	; 0x03
 512:	9c 81       	ldd	r25, Y+4	; 0x04
 514:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__mulsf3>
 518:	69 83       	std	Y+1, r22	; 0x01
 51a:	7a 83       	std	Y+2, r23	; 0x02
 51c:	8b 83       	std	Y+3, r24	; 0x03
 51e:	9c 83       	std	Y+4, r25	; 0x04
 520:	a3 01       	movw	r20, r6
 522:	92 01       	movw	r18, r4
 524:	c8 01       	movw	r24, r16
 526:	b7 01       	movw	r22, r14
 528:	0e 94 56 04 	call	0x8ac	; 0x8ac <__subsf3>
 52c:	9b 01       	movw	r18, r22
 52e:	ac 01       	movw	r20, r24
 530:	69 81       	ldd	r22, Y+1	; 0x01
 532:	7a 81       	ldd	r23, Y+2	; 0x02
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	9c 81       	ldd	r25, Y+4	; 0x04
 538:	0e 94 c3 04 	call	0x986	; 0x986 <__divsf3>
 53c:	9b 01       	movw	r18, r22
 53e:	ac 01       	movw	r20, r24
 540:	c6 01       	movw	r24, r12
 542:	b5 01       	movw	r22, r10
 544:	0e 94 57 04 	call	0x8ae	; 0x8ae <__addsf3>
}
 548:	28 96       	adiw	r28, 0x08	; 8
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
 562:	cf 90       	pop	r12
 564:	bf 90       	pop	r11
 566:	af 90       	pop	r10
 568:	7f 90       	pop	r7
 56a:	6f 90       	pop	r6
 56c:	5f 90       	pop	r5
 56e:	4f 90       	pop	r4
 570:	08 95       	ret

00000572 <initPWM0FastA0>:

void initPWM0FastA0(uint8_t inverted, uint16_t prescaler){
	DDRD |= (1<<DDD6);						//PIN D6 COMO SALIDA
 572:	9a b1       	in	r25, 0x0a	; 10
 574:	90 64       	ori	r25, 0x40	; 64
 576:	9a b9       	out	0x0a, r25	; 10
	if(inverted){
 578:	88 23       	and	r24, r24
 57a:	21 f0       	breq	.+8      	; 0x584 <initPWM0FastA0+0x12>
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);	//OC0A INVERTIDO
 57c:	84 b5       	in	r24, 0x24	; 36
 57e:	80 6c       	ori	r24, 0xC0	; 192
 580:	84 bd       	out	0x24, r24	; 36
 582:	03 c0       	rjmp	.+6      	; 0x58a <initPWM0FastA0+0x18>
		}else{
		TCCR0A |= (1<<COM0A1);				//OC0A NO INVERTIDO
 584:	84 b5       	in	r24, 0x24	; 36
 586:	80 68       	ori	r24, 0x80	; 128
 588:	84 bd       	out	0x24, r24	; 36
	}
	
	TCCR0A |= ((1<<WGM00)|(1<<WGM01));		//MODO PWM FAST, 8 bits
 58a:	84 b5       	in	r24, 0x24	; 36
 58c:	83 60       	ori	r24, 0x03	; 3
 58e:	84 bd       	out	0x24, r24	; 36
	if(prescaler==1024){
 590:	61 15       	cp	r22, r1
 592:	74 40       	sbci	r23, 0x04	; 4
 594:	19 f4       	brne	.+6      	; 0x59c <initPWM0FastA0+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);//PRESCALER DE 1024
 596:	85 b5       	in	r24, 0x25	; 37
 598:	85 60       	ori	r24, 0x05	; 5
 59a:	85 bd       	out	0x25, r24	; 37
 59c:	08 95       	ret

0000059e <initPWM0FastB0>:
	}
}

void initPWM0FastB0(uint8_t inverted, uint16_t prescaler){
	DDRD |= (1<<DDD5);						//PIN D5 COMO SALIDA
 59e:	9a b1       	in	r25, 0x0a	; 10
 5a0:	90 62       	ori	r25, 0x20	; 32
 5a2:	9a b9       	out	0x0a, r25	; 10
	if(inverted){
 5a4:	88 23       	and	r24, r24
 5a6:	21 f0       	breq	.+8      	; 0x5b0 <initPWM0FastB0+0x12>
		TCCR0A |= (1<<COM0B1)|(1<<COM0B0);	//OC0B INVERTIDO
 5a8:	84 b5       	in	r24, 0x24	; 36
 5aa:	80 63       	ori	r24, 0x30	; 48
 5ac:	84 bd       	out	0x24, r24	; 36
 5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <initPWM0FastB0+0x18>
		}else{
		TCCR0A |= (1<<COM0B1);				//OC0B NO INVERTIDO
 5b0:	84 b5       	in	r24, 0x24	; 36
 5b2:	80 62       	ori	r24, 0x20	; 32
 5b4:	84 bd       	out	0x24, r24	; 36
		
	}
	
	TCCR0A |= ((1<<WGM00)|(1<<WGM01));		//MODO PWM FAST, 8 bits
 5b6:	84 b5       	in	r24, 0x24	; 36
 5b8:	83 60       	ori	r24, 0x03	; 3
 5ba:	84 bd       	out	0x24, r24	; 36
	if(prescaler==1024){
 5bc:	61 15       	cp	r22, r1
 5be:	74 40       	sbci	r23, 0x04	; 4
 5c0:	19 f4       	brne	.+6      	; 0x5c8 <initPWM0FastB0+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);			//PRESCALER DE 1024
 5c2:	85 b5       	in	r24, 0x25	; 37
 5c4:	85 60       	ori	r24, 0x05	; 5
 5c6:	85 bd       	out	0x25, r24	; 37
 5c8:	08 95       	ret

000005ca <updateDutyCycleA0>:
	}
}


void updateDutyCycleA0(uint8_t duty){
 5ca:	af 92       	push	r10
 5cc:	bf 92       	push	r11
 5ce:	cf 92       	push	r12
 5d0:	df 92       	push	r13
 5d2:	ef 92       	push	r14
 5d4:	ff 92       	push	r15
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17
	duty = map0(duty, 0, 255, 6, 40);
 5da:	68 2f       	mov	r22, r24
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 64 05 	call	0xac8	; 0xac8 <__floatunsisf>
 5e6:	22 e4       	ldi	r18, 0x42	; 66
 5e8:	2f 93       	push	r18
 5ea:	20 e2       	ldi	r18, 0x20	; 32
 5ec:	2f 93       	push	r18
 5ee:	1f 92       	push	r1
 5f0:	1f 92       	push	r1
 5f2:	0f 2e       	mov	r0, r31
 5f4:	a1 2c       	mov	r10, r1
 5f6:	b1 2c       	mov	r11, r1
 5f8:	f0 ec       	ldi	r31, 0xC0	; 192
 5fa:	cf 2e       	mov	r12, r31
 5fc:	f0 e4       	ldi	r31, 0x40	; 64
 5fe:	df 2e       	mov	r13, r31
 600:	f0 2d       	mov	r31, r0
 602:	e1 2c       	mov	r14, r1
 604:	f1 2c       	mov	r15, r1
 606:	0f e7       	ldi	r16, 0x7F	; 127
 608:	13 e4       	ldi	r17, 0x43	; 67
 60a:	20 e0       	ldi	r18, 0x00	; 0
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	a9 01       	movw	r20, r18
 610:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <map0>
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fixunssfsi>
	OCR0A = duty;
 620:	67 bd       	out	0x27, r22	; 39
	
}
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	ff 90       	pop	r15
 628:	ef 90       	pop	r14
 62a:	df 90       	pop	r13
 62c:	cf 90       	pop	r12
 62e:	bf 90       	pop	r11
 630:	af 90       	pop	r10
 632:	08 95       	ret

00000634 <updateDutyCycleB0>:

void updateDutyCycleB0(uint8_t duty){
 634:	af 92       	push	r10
 636:	bf 92       	push	r11
 638:	cf 92       	push	r12
 63a:	df 92       	push	r13
 63c:	ef 92       	push	r14
 63e:	ff 92       	push	r15
 640:	0f 93       	push	r16
 642:	1f 93       	push	r17
	duty = map0(duty, 0, 255, 6, 40);
 644:	68 2f       	mov	r22, r24
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 64 05 	call	0xac8	; 0xac8 <__floatunsisf>
 650:	22 e4       	ldi	r18, 0x42	; 66
 652:	2f 93       	push	r18
 654:	20 e2       	ldi	r18, 0x20	; 32
 656:	2f 93       	push	r18
 658:	1f 92       	push	r1
 65a:	1f 92       	push	r1
 65c:	0f 2e       	mov	r0, r31
 65e:	a1 2c       	mov	r10, r1
 660:	b1 2c       	mov	r11, r1
 662:	f0 ec       	ldi	r31, 0xC0	; 192
 664:	cf 2e       	mov	r12, r31
 666:	f0 e4       	ldi	r31, 0x40	; 64
 668:	df 2e       	mov	r13, r31
 66a:	f0 2d       	mov	r31, r0
 66c:	e1 2c       	mov	r14, r1
 66e:	f1 2c       	mov	r15, r1
 670:	0f e7       	ldi	r16, 0x7F	; 127
 672:	13 e4       	ldi	r17, 0x43	; 67
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	a9 01       	movw	r20, r18
 67a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <map0>
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fixunssfsi>
	OCR0B = duty;
 68a:	68 bd       	out	0x28, r22	; 40
	
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	ff 90       	pop	r15
 692:	ef 90       	pop	r14
 694:	df 90       	pop	r13
 696:	cf 90       	pop	r12
 698:	bf 90       	pop	r11
 69a:	af 90       	pop	r10
 69c:	08 95       	ret

0000069e <map2>:
#include <avr/io.h>
#include <stdint.h>
#include "PWM2.h"

float map2(float duty, float Imin, float Imax, float Omin, float Omax){
 69e:	4f 92       	push	r4
 6a0:	5f 92       	push	r5
 6a2:	6f 92       	push	r6
 6a4:	7f 92       	push	r7
 6a6:	af 92       	push	r10
 6a8:	bf 92       	push	r11
 6aa:	cf 92       	push	r12
 6ac:	df 92       	push	r13
 6ae:	ef 92       	push	r14
 6b0:	ff 92       	push	r15
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
 6be:	28 97       	sbiw	r28, 0x08	; 8
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	f8 94       	cli
 6c4:	de bf       	out	0x3e, r29	; 62
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	cd bf       	out	0x3d, r28	; 61
 6ca:	29 01       	movw	r4, r18
 6cc:	3a 01       	movw	r6, r20
 6ce:	ed 82       	std	Y+5, r14	; 0x05
 6d0:	fe 82       	std	Y+6, r15	; 0x06
 6d2:	0f 83       	std	Y+7, r16	; 0x07
 6d4:	18 87       	std	Y+8, r17	; 0x08
	return ((duty - Imin)*(Omax - Omin)/(Imax - Imin)) + Omin;
 6d6:	0e 94 56 04 	call	0x8ac	; 0x8ac <__subsf3>
 6da:	69 83       	std	Y+1, r22	; 0x01
 6dc:	7a 83       	std	Y+2, r23	; 0x02
 6de:	8b 83       	std	Y+3, r24	; 0x03
 6e0:	9c 83       	std	Y+4, r25	; 0x04
 6e2:	a6 01       	movw	r20, r12
 6e4:	95 01       	movw	r18, r10
 6e6:	69 8d       	ldd	r22, Y+25	; 0x19
 6e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 6ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
 6ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
 6ee:	0e 94 56 04 	call	0x8ac	; 0x8ac <__subsf3>
 6f2:	9b 01       	movw	r18, r22
 6f4:	ac 01       	movw	r20, r24
 6f6:	69 81       	ldd	r22, Y+1	; 0x01
 6f8:	7a 81       	ldd	r23, Y+2	; 0x02
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	9c 81       	ldd	r25, Y+4	; 0x04
 6fe:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__mulsf3>
 702:	69 83       	std	Y+1, r22	; 0x01
 704:	7a 83       	std	Y+2, r23	; 0x02
 706:	8b 83       	std	Y+3, r24	; 0x03
 708:	9c 83       	std	Y+4, r25	; 0x04
 70a:	a3 01       	movw	r20, r6
 70c:	92 01       	movw	r18, r4
 70e:	c8 01       	movw	r24, r16
 710:	b7 01       	movw	r22, r14
 712:	0e 94 56 04 	call	0x8ac	; 0x8ac <__subsf3>
 716:	9b 01       	movw	r18, r22
 718:	ac 01       	movw	r20, r24
 71a:	69 81       	ldd	r22, Y+1	; 0x01
 71c:	7a 81       	ldd	r23, Y+2	; 0x02
 71e:	8b 81       	ldd	r24, Y+3	; 0x03
 720:	9c 81       	ldd	r25, Y+4	; 0x04
 722:	0e 94 c3 04 	call	0x986	; 0x986 <__divsf3>
 726:	9b 01       	movw	r18, r22
 728:	ac 01       	movw	r20, r24
 72a:	c6 01       	movw	r24, r12
 72c:	b5 01       	movw	r22, r10
 72e:	0e 94 57 04 	call	0x8ae	; 0x8ae <__addsf3>
}
 732:	28 96       	adiw	r28, 0x08	; 8
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	f8 94       	cli
 738:	de bf       	out	0x3e, r29	; 62
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	cd bf       	out	0x3d, r28	; 61
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	1f 91       	pop	r17
 744:	0f 91       	pop	r16
 746:	ff 90       	pop	r15
 748:	ef 90       	pop	r14
 74a:	df 90       	pop	r13
 74c:	cf 90       	pop	r12
 74e:	bf 90       	pop	r11
 750:	af 90       	pop	r10
 752:	7f 90       	pop	r7
 754:	6f 90       	pop	r6
 756:	5f 90       	pop	r5
 758:	4f 90       	pop	r4
 75a:	08 95       	ret

0000075c <initPWM0FastA2>:

void initPWM0FastA2(uint8_t inverted, uint16_t prescaler){
	DDRB |= (1<<DDB3);						//PIN B3 COMO SALIDA
 75c:	94 b1       	in	r25, 0x04	; 4
 75e:	98 60       	ori	r25, 0x08	; 8
 760:	94 b9       	out	0x04, r25	; 4
	if(inverted){
 762:	88 23       	and	r24, r24
 764:	31 f0       	breq	.+12     	; 0x772 <initPWM0FastA2+0x16>
		TCCR2A |= (1<<COM2A1)|(1<<COM2A0);	//OC0A INVERTIDO
 766:	e0 eb       	ldi	r30, 0xB0	; 176
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	80 6c       	ori	r24, 0xC0	; 192
 76e:	80 83       	st	Z, r24
 770:	05 c0       	rjmp	.+10     	; 0x77c <initPWM0FastA2+0x20>
		}else{
		TCCR2A |= (1<<COM2A1);				//OC0A NO INVERTIDO
 772:	e0 eb       	ldi	r30, 0xB0	; 176
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	80 68       	ori	r24, 0x80	; 128
 77a:	80 83       	st	Z, r24
	}
	
	TCCR2A |= ((1<<WGM20)|(1<<WGM21));		//MODO PWM FAST, 8 bits
 77c:	e0 eb       	ldi	r30, 0xB0	; 176
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	83 60       	ori	r24, 0x03	; 3
 784:	80 83       	st	Z, r24
	if(prescaler==1024){
 786:	61 15       	cp	r22, r1
 788:	74 40       	sbci	r23, 0x04	; 4
 78a:	29 f4       	brne	.+10     	; 0x796 <initPWM0FastA2+0x3a>
		TCCR2B |= (1<<CS22)|(1<<CS20);//PRESCALER DE 1024
 78c:	e1 eb       	ldi	r30, 0xB1	; 177
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	85 60       	ori	r24, 0x05	; 5
 794:	80 83       	st	Z, r24
 796:	08 95       	ret

00000798 <initPWM0FastB2>:
	}
}

void initPWM0FastB2(uint8_t inverted, uint16_t prescaler){
	DDRD |= (1<<DDD3);						//PIN D3 COMO SALIDA
 798:	9a b1       	in	r25, 0x0a	; 10
 79a:	98 60       	ori	r25, 0x08	; 8
 79c:	9a b9       	out	0x0a, r25	; 10
	if(inverted){
 79e:	88 23       	and	r24, r24
 7a0:	31 f0       	breq	.+12     	; 0x7ae <initPWM0FastB2+0x16>
		TCCR2A |= (1<<COM2B1)|(1<<COM2B0);	//OC0B INVERTIDO
 7a2:	e0 eb       	ldi	r30, 0xB0	; 176
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	80 63       	ori	r24, 0x30	; 48
 7aa:	80 83       	st	Z, r24
 7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <initPWM0FastB2+0x20>
		}else{
		TCCR2A |= (1<<COM2B1);				//OC0B NO INVERTIDO
 7ae:	e0 eb       	ldi	r30, 0xB0	; 176
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	80 62       	ori	r24, 0x20	; 32
 7b6:	80 83       	st	Z, r24
		
	}
	
	TCCR2A |= ((1<<WGM20)|(1<<WGM21));		//MODO PWM FAST, 8 bits
 7b8:	e0 eb       	ldi	r30, 0xB0	; 176
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	83 60       	ori	r24, 0x03	; 3
 7c0:	80 83       	st	Z, r24
	if(prescaler==1024){
 7c2:	61 15       	cp	r22, r1
 7c4:	74 40       	sbci	r23, 0x04	; 4
 7c6:	29 f4       	brne	.+10     	; 0x7d2 <initPWM0FastB2+0x3a>
		TCCR2B |= (1<<CS22)|(1<<CS20);			//PRESCALER DE 1024
 7c8:	e1 eb       	ldi	r30, 0xB1	; 177
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	85 60       	ori	r24, 0x05	; 5
 7d0:	80 83       	st	Z, r24
 7d2:	08 95       	ret

000007d4 <updateDutyCycleA2>:
	}
}


void updateDutyCycleA2(uint8_t duty){
 7d4:	af 92       	push	r10
 7d6:	bf 92       	push	r11
 7d8:	cf 92       	push	r12
 7da:	df 92       	push	r13
 7dc:	ef 92       	push	r14
 7de:	ff 92       	push	r15
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
	duty = map2(duty, 0, 255, 6, 40);
 7e4:	68 2f       	mov	r22, r24
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 64 05 	call	0xac8	; 0xac8 <__floatunsisf>
 7f0:	22 e4       	ldi	r18, 0x42	; 66
 7f2:	2f 93       	push	r18
 7f4:	20 e2       	ldi	r18, 0x20	; 32
 7f6:	2f 93       	push	r18
 7f8:	1f 92       	push	r1
 7fa:	1f 92       	push	r1
 7fc:	0f 2e       	mov	r0, r31
 7fe:	a1 2c       	mov	r10, r1
 800:	b1 2c       	mov	r11, r1
 802:	f0 ec       	ldi	r31, 0xC0	; 192
 804:	cf 2e       	mov	r12, r31
 806:	f0 e4       	ldi	r31, 0x40	; 64
 808:	df 2e       	mov	r13, r31
 80a:	f0 2d       	mov	r31, r0
 80c:	e1 2c       	mov	r14, r1
 80e:	f1 2c       	mov	r15, r1
 810:	0f e7       	ldi	r16, 0x7F	; 127
 812:	13 e4       	ldi	r17, 0x43	; 67
 814:	20 e0       	ldi	r18, 0x00	; 0
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	a9 01       	movw	r20, r18
 81a:	0e 94 4f 03 	call	0x69e	; 0x69e <map2>
 81e:	0f 90       	pop	r0
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	0f 90       	pop	r0
 826:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fixunssfsi>
	OCR2A = duty;
 82a:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
}
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	ff 90       	pop	r15
 834:	ef 90       	pop	r14
 836:	df 90       	pop	r13
 838:	cf 90       	pop	r12
 83a:	bf 90       	pop	r11
 83c:	af 90       	pop	r10
 83e:	08 95       	ret

00000840 <updateDutyCycleB2>:

void updateDutyCycleB2(uint8_t duty){
 840:	af 92       	push	r10
 842:	bf 92       	push	r11
 844:	cf 92       	push	r12
 846:	df 92       	push	r13
 848:	ef 92       	push	r14
 84a:	ff 92       	push	r15
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
	duty = map2(duty, 0, 255, 6, 40);
 850:	68 2f       	mov	r22, r24
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 64 05 	call	0xac8	; 0xac8 <__floatunsisf>
 85c:	22 e4       	ldi	r18, 0x42	; 66
 85e:	2f 93       	push	r18
 860:	20 e2       	ldi	r18, 0x20	; 32
 862:	2f 93       	push	r18
 864:	1f 92       	push	r1
 866:	1f 92       	push	r1
 868:	0f 2e       	mov	r0, r31
 86a:	a1 2c       	mov	r10, r1
 86c:	b1 2c       	mov	r11, r1
 86e:	f0 ec       	ldi	r31, 0xC0	; 192
 870:	cf 2e       	mov	r12, r31
 872:	f0 e4       	ldi	r31, 0x40	; 64
 874:	df 2e       	mov	r13, r31
 876:	f0 2d       	mov	r31, r0
 878:	e1 2c       	mov	r14, r1
 87a:	f1 2c       	mov	r15, r1
 87c:	0f e7       	ldi	r16, 0x7F	; 127
 87e:	13 e4       	ldi	r17, 0x43	; 67
 880:	20 e0       	ldi	r18, 0x00	; 0
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	a9 01       	movw	r20, r18
 886:	0e 94 4f 03 	call	0x69e	; 0x69e <map2>
 88a:	0f 90       	pop	r0
 88c:	0f 90       	pop	r0
 88e:	0f 90       	pop	r0
 890:	0f 90       	pop	r0
 892:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fixunssfsi>
	OCR2B = duty;	
 896:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	ff 90       	pop	r15
 8a0:	ef 90       	pop	r14
 8a2:	df 90       	pop	r13
 8a4:	cf 90       	pop	r12
 8a6:	bf 90       	pop	r11
 8a8:	af 90       	pop	r10
 8aa:	08 95       	ret

000008ac <__subsf3>:
 8ac:	50 58       	subi	r21, 0x80	; 128

000008ae <__addsf3>:
 8ae:	bb 27       	eor	r27, r27
 8b0:	aa 27       	eor	r26, r26
 8b2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__addsf3x>
 8b6:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_round>
 8ba:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_pscA>
 8be:	38 f0       	brcs	.+14     	; 0x8ce <__addsf3+0x20>
 8c0:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_pscB>
 8c4:	20 f0       	brcs	.+8      	; 0x8ce <__addsf3+0x20>
 8c6:	39 f4       	brne	.+14     	; 0x8d6 <__addsf3+0x28>
 8c8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ca:	19 f4       	brne	.+6      	; 0x8d2 <__addsf3+0x24>
 8cc:	26 f4       	brtc	.+8      	; 0x8d6 <__addsf3+0x28>
 8ce:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_nan>
 8d2:	0e f4       	brtc	.+2      	; 0x8d6 <__addsf3+0x28>
 8d4:	e0 95       	com	r30
 8d6:	e7 fb       	bst	r30, 7
 8d8:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_inf>

000008dc <__addsf3x>:
 8dc:	e9 2f       	mov	r30, r25
 8de:	0e 94 c9 05 	call	0xb92	; 0xb92 <__fp_split3>
 8e2:	58 f3       	brcs	.-42     	; 0x8ba <__addsf3+0xc>
 8e4:	ba 17       	cp	r27, r26
 8e6:	62 07       	cpc	r22, r18
 8e8:	73 07       	cpc	r23, r19
 8ea:	84 07       	cpc	r24, r20
 8ec:	95 07       	cpc	r25, r21
 8ee:	20 f0       	brcs	.+8      	; 0x8f8 <__addsf3x+0x1c>
 8f0:	79 f4       	brne	.+30     	; 0x910 <__stack+0x11>
 8f2:	a6 f5       	brtc	.+104    	; 0x95c <__stack+0x5d>
 8f4:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__fp_zero>
 8f8:	0e f4       	brtc	.+2      	; 0x8fc <__addsf3x+0x20>
 8fa:	e0 95       	com	r30
 8fc:	0b 2e       	mov	r0, r27
 8fe:	ba 2f       	mov	r27, r26
 900:	a0 2d       	mov	r26, r0
 902:	0b 01       	movw	r0, r22
 904:	b9 01       	movw	r22, r18
 906:	90 01       	movw	r18, r0
 908:	0c 01       	movw	r0, r24
 90a:	ca 01       	movw	r24, r20
 90c:	a0 01       	movw	r20, r0
 90e:	11 24       	eor	r1, r1
 910:	ff 27       	eor	r31, r31
 912:	59 1b       	sub	r21, r25
 914:	99 f0       	breq	.+38     	; 0x93c <__stack+0x3d>
 916:	59 3f       	cpi	r21, 0xF9	; 249
 918:	50 f4       	brcc	.+20     	; 0x92e <__stack+0x2f>
 91a:	50 3e       	cpi	r21, 0xE0	; 224
 91c:	68 f1       	brcs	.+90     	; 0x978 <__stack+0x79>
 91e:	1a 16       	cp	r1, r26
 920:	f0 40       	sbci	r31, 0x00	; 0
 922:	a2 2f       	mov	r26, r18
 924:	23 2f       	mov	r18, r19
 926:	34 2f       	mov	r19, r20
 928:	44 27       	eor	r20, r20
 92a:	58 5f       	subi	r21, 0xF8	; 248
 92c:	f3 cf       	rjmp	.-26     	; 0x914 <__stack+0x15>
 92e:	46 95       	lsr	r20
 930:	37 95       	ror	r19
 932:	27 95       	ror	r18
 934:	a7 95       	ror	r26
 936:	f0 40       	sbci	r31, 0x00	; 0
 938:	53 95       	inc	r21
 93a:	c9 f7       	brne	.-14     	; 0x92e <__stack+0x2f>
 93c:	7e f4       	brtc	.+30     	; 0x95c <__stack+0x5d>
 93e:	1f 16       	cp	r1, r31
 940:	ba 0b       	sbc	r27, r26
 942:	62 0b       	sbc	r22, r18
 944:	73 0b       	sbc	r23, r19
 946:	84 0b       	sbc	r24, r20
 948:	ba f0       	brmi	.+46     	; 0x978 <__stack+0x79>
 94a:	91 50       	subi	r25, 0x01	; 1
 94c:	a1 f0       	breq	.+40     	; 0x976 <__stack+0x77>
 94e:	ff 0f       	add	r31, r31
 950:	bb 1f       	adc	r27, r27
 952:	66 1f       	adc	r22, r22
 954:	77 1f       	adc	r23, r23
 956:	88 1f       	adc	r24, r24
 958:	c2 f7       	brpl	.-16     	; 0x94a <__stack+0x4b>
 95a:	0e c0       	rjmp	.+28     	; 0x978 <__stack+0x79>
 95c:	ba 0f       	add	r27, r26
 95e:	62 1f       	adc	r22, r18
 960:	73 1f       	adc	r23, r19
 962:	84 1f       	adc	r24, r20
 964:	48 f4       	brcc	.+18     	; 0x978 <__stack+0x79>
 966:	87 95       	ror	r24
 968:	77 95       	ror	r23
 96a:	67 95       	ror	r22
 96c:	b7 95       	ror	r27
 96e:	f7 95       	ror	r31
 970:	9e 3f       	cpi	r25, 0xFE	; 254
 972:	08 f0       	brcs	.+2      	; 0x976 <__stack+0x77>
 974:	b0 cf       	rjmp	.-160    	; 0x8d6 <__addsf3+0x28>
 976:	93 95       	inc	r25
 978:	88 0f       	add	r24, r24
 97a:	08 f0       	brcs	.+2      	; 0x97e <__stack+0x7f>
 97c:	99 27       	eor	r25, r25
 97e:	ee 0f       	add	r30, r30
 980:	97 95       	ror	r25
 982:	87 95       	ror	r24
 984:	08 95       	ret

00000986 <__divsf3>:
 986:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__divsf3x>
 98a:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_round>
 98e:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_pscB>
 992:	58 f0       	brcs	.+22     	; 0x9aa <__divsf3+0x24>
 994:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_pscA>
 998:	40 f0       	brcs	.+16     	; 0x9aa <__divsf3+0x24>
 99a:	29 f4       	brne	.+10     	; 0x9a6 <__divsf3+0x20>
 99c:	5f 3f       	cpi	r21, 0xFF	; 255
 99e:	29 f0       	breq	.+10     	; 0x9aa <__divsf3+0x24>
 9a0:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_inf>
 9a4:	51 11       	cpse	r21, r1
 9a6:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_szero>
 9aa:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_nan>

000009ae <__divsf3x>:
 9ae:	0e 94 c9 05 	call	0xb92	; 0xb92 <__fp_split3>
 9b2:	68 f3       	brcs	.-38     	; 0x98e <__divsf3+0x8>

000009b4 <__divsf3_pse>:
 9b4:	99 23       	and	r25, r25
 9b6:	b1 f3       	breq	.-20     	; 0x9a4 <__divsf3+0x1e>
 9b8:	55 23       	and	r21, r21
 9ba:	91 f3       	breq	.-28     	; 0x9a0 <__divsf3+0x1a>
 9bc:	95 1b       	sub	r25, r21
 9be:	55 0b       	sbc	r21, r21
 9c0:	bb 27       	eor	r27, r27
 9c2:	aa 27       	eor	r26, r26
 9c4:	62 17       	cp	r22, r18
 9c6:	73 07       	cpc	r23, r19
 9c8:	84 07       	cpc	r24, r20
 9ca:	38 f0       	brcs	.+14     	; 0x9da <__divsf3_pse+0x26>
 9cc:	9f 5f       	subi	r25, 0xFF	; 255
 9ce:	5f 4f       	sbci	r21, 0xFF	; 255
 9d0:	22 0f       	add	r18, r18
 9d2:	33 1f       	adc	r19, r19
 9d4:	44 1f       	adc	r20, r20
 9d6:	aa 1f       	adc	r26, r26
 9d8:	a9 f3       	breq	.-22     	; 0x9c4 <__divsf3_pse+0x10>
 9da:	35 d0       	rcall	.+106    	; 0xa46 <__divsf3_pse+0x92>
 9dc:	0e 2e       	mov	r0, r30
 9de:	3a f0       	brmi	.+14     	; 0x9ee <__divsf3_pse+0x3a>
 9e0:	e0 e8       	ldi	r30, 0x80	; 128
 9e2:	32 d0       	rcall	.+100    	; 0xa48 <__divsf3_pse+0x94>
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	50 40       	sbci	r21, 0x00	; 0
 9e8:	e6 95       	lsr	r30
 9ea:	00 1c       	adc	r0, r0
 9ec:	ca f7       	brpl	.-14     	; 0x9e0 <__divsf3_pse+0x2c>
 9ee:	2b d0       	rcall	.+86     	; 0xa46 <__divsf3_pse+0x92>
 9f0:	fe 2f       	mov	r31, r30
 9f2:	29 d0       	rcall	.+82     	; 0xa46 <__divsf3_pse+0x92>
 9f4:	66 0f       	add	r22, r22
 9f6:	77 1f       	adc	r23, r23
 9f8:	88 1f       	adc	r24, r24
 9fa:	bb 1f       	adc	r27, r27
 9fc:	26 17       	cp	r18, r22
 9fe:	37 07       	cpc	r19, r23
 a00:	48 07       	cpc	r20, r24
 a02:	ab 07       	cpc	r26, r27
 a04:	b0 e8       	ldi	r27, 0x80	; 128
 a06:	09 f0       	breq	.+2      	; 0xa0a <__divsf3_pse+0x56>
 a08:	bb 0b       	sbc	r27, r27
 a0a:	80 2d       	mov	r24, r0
 a0c:	bf 01       	movw	r22, r30
 a0e:	ff 27       	eor	r31, r31
 a10:	93 58       	subi	r25, 0x83	; 131
 a12:	5f 4f       	sbci	r21, 0xFF	; 255
 a14:	3a f0       	brmi	.+14     	; 0xa24 <__divsf3_pse+0x70>
 a16:	9e 3f       	cpi	r25, 0xFE	; 254
 a18:	51 05       	cpc	r21, r1
 a1a:	78 f0       	brcs	.+30     	; 0xa3a <__divsf3_pse+0x86>
 a1c:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_inf>
 a20:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_szero>
 a24:	5f 3f       	cpi	r21, 0xFF	; 255
 a26:	e4 f3       	brlt	.-8      	; 0xa20 <__divsf3_pse+0x6c>
 a28:	98 3e       	cpi	r25, 0xE8	; 232
 a2a:	d4 f3       	brlt	.-12     	; 0xa20 <__divsf3_pse+0x6c>
 a2c:	86 95       	lsr	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	b7 95       	ror	r27
 a34:	f7 95       	ror	r31
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	c9 f7       	brne	.-14     	; 0xa2c <__divsf3_pse+0x78>
 a3a:	88 0f       	add	r24, r24
 a3c:	91 1d       	adc	r25, r1
 a3e:	96 95       	lsr	r25
 a40:	87 95       	ror	r24
 a42:	97 f9       	bld	r25, 7
 a44:	08 95       	ret
 a46:	e1 e0       	ldi	r30, 0x01	; 1
 a48:	66 0f       	add	r22, r22
 a4a:	77 1f       	adc	r23, r23
 a4c:	88 1f       	adc	r24, r24
 a4e:	bb 1f       	adc	r27, r27
 a50:	62 17       	cp	r22, r18
 a52:	73 07       	cpc	r23, r19
 a54:	84 07       	cpc	r24, r20
 a56:	ba 07       	cpc	r27, r26
 a58:	20 f0       	brcs	.+8      	; 0xa62 <__divsf3_pse+0xae>
 a5a:	62 1b       	sub	r22, r18
 a5c:	73 0b       	sbc	r23, r19
 a5e:	84 0b       	sbc	r24, r20
 a60:	ba 0b       	sbc	r27, r26
 a62:	ee 1f       	adc	r30, r30
 a64:	88 f7       	brcc	.-30     	; 0xa48 <__divsf3_pse+0x94>
 a66:	e0 95       	com	r30
 a68:	08 95       	ret

00000a6a <__fixunssfsi>:
 a6a:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fp_splitA>
 a6e:	88 f0       	brcs	.+34     	; 0xa92 <__fixunssfsi+0x28>
 a70:	9f 57       	subi	r25, 0x7F	; 127
 a72:	98 f0       	brcs	.+38     	; 0xa9a <__fixunssfsi+0x30>
 a74:	b9 2f       	mov	r27, r25
 a76:	99 27       	eor	r25, r25
 a78:	b7 51       	subi	r27, 0x17	; 23
 a7a:	b0 f0       	brcs	.+44     	; 0xaa8 <__fixunssfsi+0x3e>
 a7c:	e1 f0       	breq	.+56     	; 0xab6 <__fixunssfsi+0x4c>
 a7e:	66 0f       	add	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	1a f0       	brmi	.+6      	; 0xa8e <__fixunssfsi+0x24>
 a88:	ba 95       	dec	r27
 a8a:	c9 f7       	brne	.-14     	; 0xa7e <__fixunssfsi+0x14>
 a8c:	14 c0       	rjmp	.+40     	; 0xab6 <__fixunssfsi+0x4c>
 a8e:	b1 30       	cpi	r27, 0x01	; 1
 a90:	91 f0       	breq	.+36     	; 0xab6 <__fixunssfsi+0x4c>
 a92:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_zero>
 a96:	b1 e0       	ldi	r27, 0x01	; 1
 a98:	08 95       	ret
 a9a:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__fp_zero>
 a9e:	67 2f       	mov	r22, r23
 aa0:	78 2f       	mov	r23, r24
 aa2:	88 27       	eor	r24, r24
 aa4:	b8 5f       	subi	r27, 0xF8	; 248
 aa6:	39 f0       	breq	.+14     	; 0xab6 <__fixunssfsi+0x4c>
 aa8:	b9 3f       	cpi	r27, 0xF9	; 249
 aaa:	cc f3       	brlt	.-14     	; 0xa9e <__fixunssfsi+0x34>
 aac:	86 95       	lsr	r24
 aae:	77 95       	ror	r23
 ab0:	67 95       	ror	r22
 ab2:	b3 95       	inc	r27
 ab4:	d9 f7       	brne	.-10     	; 0xaac <__fixunssfsi+0x42>
 ab6:	3e f4       	brtc	.+14     	; 0xac6 <__fixunssfsi+0x5c>
 ab8:	90 95       	com	r25
 aba:	80 95       	com	r24
 abc:	70 95       	com	r23
 abe:	61 95       	neg	r22
 ac0:	7f 4f       	sbci	r23, 0xFF	; 255
 ac2:	8f 4f       	sbci	r24, 0xFF	; 255
 ac4:	9f 4f       	sbci	r25, 0xFF	; 255
 ac6:	08 95       	ret

00000ac8 <__floatunsisf>:
 ac8:	e8 94       	clt
 aca:	09 c0       	rjmp	.+18     	; 0xade <__floatsisf+0x12>

00000acc <__floatsisf>:
 acc:	97 fb       	bst	r25, 7
 ace:	3e f4       	brtc	.+14     	; 0xade <__floatsisf+0x12>
 ad0:	90 95       	com	r25
 ad2:	80 95       	com	r24
 ad4:	70 95       	com	r23
 ad6:	61 95       	neg	r22
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255
 ada:	8f 4f       	sbci	r24, 0xFF	; 255
 adc:	9f 4f       	sbci	r25, 0xFF	; 255
 ade:	99 23       	and	r25, r25
 ae0:	a9 f0       	breq	.+42     	; 0xb0c <__floatsisf+0x40>
 ae2:	f9 2f       	mov	r31, r25
 ae4:	96 e9       	ldi	r25, 0x96	; 150
 ae6:	bb 27       	eor	r27, r27
 ae8:	93 95       	inc	r25
 aea:	f6 95       	lsr	r31
 aec:	87 95       	ror	r24
 aee:	77 95       	ror	r23
 af0:	67 95       	ror	r22
 af2:	b7 95       	ror	r27
 af4:	f1 11       	cpse	r31, r1
 af6:	f8 cf       	rjmp	.-16     	; 0xae8 <__floatsisf+0x1c>
 af8:	fa f4       	brpl	.+62     	; 0xb38 <__floatsisf+0x6c>
 afa:	bb 0f       	add	r27, r27
 afc:	11 f4       	brne	.+4      	; 0xb02 <__floatsisf+0x36>
 afe:	60 ff       	sbrs	r22, 0
 b00:	1b c0       	rjmp	.+54     	; 0xb38 <__floatsisf+0x6c>
 b02:	6f 5f       	subi	r22, 0xFF	; 255
 b04:	7f 4f       	sbci	r23, 0xFF	; 255
 b06:	8f 4f       	sbci	r24, 0xFF	; 255
 b08:	9f 4f       	sbci	r25, 0xFF	; 255
 b0a:	16 c0       	rjmp	.+44     	; 0xb38 <__floatsisf+0x6c>
 b0c:	88 23       	and	r24, r24
 b0e:	11 f0       	breq	.+4      	; 0xb14 <__floatsisf+0x48>
 b10:	96 e9       	ldi	r25, 0x96	; 150
 b12:	11 c0       	rjmp	.+34     	; 0xb36 <__floatsisf+0x6a>
 b14:	77 23       	and	r23, r23
 b16:	21 f0       	breq	.+8      	; 0xb20 <__floatsisf+0x54>
 b18:	9e e8       	ldi	r25, 0x8E	; 142
 b1a:	87 2f       	mov	r24, r23
 b1c:	76 2f       	mov	r23, r22
 b1e:	05 c0       	rjmp	.+10     	; 0xb2a <__floatsisf+0x5e>
 b20:	66 23       	and	r22, r22
 b22:	71 f0       	breq	.+28     	; 0xb40 <__floatsisf+0x74>
 b24:	96 e8       	ldi	r25, 0x86	; 134
 b26:	86 2f       	mov	r24, r22
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	60 e0       	ldi	r22, 0x00	; 0
 b2c:	2a f0       	brmi	.+10     	; 0xb38 <__floatsisf+0x6c>
 b2e:	9a 95       	dec	r25
 b30:	66 0f       	add	r22, r22
 b32:	77 1f       	adc	r23, r23
 b34:	88 1f       	adc	r24, r24
 b36:	da f7       	brpl	.-10     	; 0xb2e <__floatsisf+0x62>
 b38:	88 0f       	add	r24, r24
 b3a:	96 95       	lsr	r25
 b3c:	87 95       	ror	r24
 b3e:	97 f9       	bld	r25, 7
 b40:	08 95       	ret

00000b42 <__fp_inf>:
 b42:	97 f9       	bld	r25, 7
 b44:	9f 67       	ori	r25, 0x7F	; 127
 b46:	80 e8       	ldi	r24, 0x80	; 128
 b48:	70 e0       	ldi	r23, 0x00	; 0
 b4a:	60 e0       	ldi	r22, 0x00	; 0
 b4c:	08 95       	ret

00000b4e <__fp_nan>:
 b4e:	9f ef       	ldi	r25, 0xFF	; 255
 b50:	80 ec       	ldi	r24, 0xC0	; 192
 b52:	08 95       	ret

00000b54 <__fp_pscA>:
 b54:	00 24       	eor	r0, r0
 b56:	0a 94       	dec	r0
 b58:	16 16       	cp	r1, r22
 b5a:	17 06       	cpc	r1, r23
 b5c:	18 06       	cpc	r1, r24
 b5e:	09 06       	cpc	r0, r25
 b60:	08 95       	ret

00000b62 <__fp_pscB>:
 b62:	00 24       	eor	r0, r0
 b64:	0a 94       	dec	r0
 b66:	12 16       	cp	r1, r18
 b68:	13 06       	cpc	r1, r19
 b6a:	14 06       	cpc	r1, r20
 b6c:	05 06       	cpc	r0, r21
 b6e:	08 95       	ret

00000b70 <__fp_round>:
 b70:	09 2e       	mov	r0, r25
 b72:	03 94       	inc	r0
 b74:	00 0c       	add	r0, r0
 b76:	11 f4       	brne	.+4      	; 0xb7c <__fp_round+0xc>
 b78:	88 23       	and	r24, r24
 b7a:	52 f0       	brmi	.+20     	; 0xb90 <__fp_round+0x20>
 b7c:	bb 0f       	add	r27, r27
 b7e:	40 f4       	brcc	.+16     	; 0xb90 <__fp_round+0x20>
 b80:	bf 2b       	or	r27, r31
 b82:	11 f4       	brne	.+4      	; 0xb88 <__fp_round+0x18>
 b84:	60 ff       	sbrs	r22, 0
 b86:	04 c0       	rjmp	.+8      	; 0xb90 <__fp_round+0x20>
 b88:	6f 5f       	subi	r22, 0xFF	; 255
 b8a:	7f 4f       	sbci	r23, 0xFF	; 255
 b8c:	8f 4f       	sbci	r24, 0xFF	; 255
 b8e:	9f 4f       	sbci	r25, 0xFF	; 255
 b90:	08 95       	ret

00000b92 <__fp_split3>:
 b92:	57 fd       	sbrc	r21, 7
 b94:	90 58       	subi	r25, 0x80	; 128
 b96:	44 0f       	add	r20, r20
 b98:	55 1f       	adc	r21, r21
 b9a:	59 f0       	breq	.+22     	; 0xbb2 <__fp_splitA+0x10>
 b9c:	5f 3f       	cpi	r21, 0xFF	; 255
 b9e:	71 f0       	breq	.+28     	; 0xbbc <__fp_splitA+0x1a>
 ba0:	47 95       	ror	r20

00000ba2 <__fp_splitA>:
 ba2:	88 0f       	add	r24, r24
 ba4:	97 fb       	bst	r25, 7
 ba6:	99 1f       	adc	r25, r25
 ba8:	61 f0       	breq	.+24     	; 0xbc2 <__fp_splitA+0x20>
 baa:	9f 3f       	cpi	r25, 0xFF	; 255
 bac:	79 f0       	breq	.+30     	; 0xbcc <__fp_splitA+0x2a>
 bae:	87 95       	ror	r24
 bb0:	08 95       	ret
 bb2:	12 16       	cp	r1, r18
 bb4:	13 06       	cpc	r1, r19
 bb6:	14 06       	cpc	r1, r20
 bb8:	55 1f       	adc	r21, r21
 bba:	f2 cf       	rjmp	.-28     	; 0xba0 <__fp_split3+0xe>
 bbc:	46 95       	lsr	r20
 bbe:	f1 df       	rcall	.-30     	; 0xba2 <__fp_splitA>
 bc0:	08 c0       	rjmp	.+16     	; 0xbd2 <__fp_splitA+0x30>
 bc2:	16 16       	cp	r1, r22
 bc4:	17 06       	cpc	r1, r23
 bc6:	18 06       	cpc	r1, r24
 bc8:	99 1f       	adc	r25, r25
 bca:	f1 cf       	rjmp	.-30     	; 0xbae <__fp_splitA+0xc>
 bcc:	86 95       	lsr	r24
 bce:	71 05       	cpc	r23, r1
 bd0:	61 05       	cpc	r22, r1
 bd2:	08 94       	sec
 bd4:	08 95       	ret

00000bd6 <__fp_zero>:
 bd6:	e8 94       	clt

00000bd8 <__fp_szero>:
 bd8:	bb 27       	eor	r27, r27
 bda:	66 27       	eor	r22, r22
 bdc:	77 27       	eor	r23, r23
 bde:	cb 01       	movw	r24, r22
 be0:	97 f9       	bld	r25, 7
 be2:	08 95       	ret

00000be4 <__mulsf3>:
 be4:	0e 94 05 06 	call	0xc0a	; 0xc0a <__mulsf3x>
 be8:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_round>
 bec:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_pscA>
 bf0:	38 f0       	brcs	.+14     	; 0xc00 <__mulsf3+0x1c>
 bf2:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_pscB>
 bf6:	20 f0       	brcs	.+8      	; 0xc00 <__mulsf3+0x1c>
 bf8:	95 23       	and	r25, r21
 bfa:	11 f0       	breq	.+4      	; 0xc00 <__mulsf3+0x1c>
 bfc:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_inf>
 c00:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_nan>
 c04:	11 24       	eor	r1, r1
 c06:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_szero>

00000c0a <__mulsf3x>:
 c0a:	0e 94 c9 05 	call	0xb92	; 0xb92 <__fp_split3>
 c0e:	70 f3       	brcs	.-36     	; 0xbec <__mulsf3+0x8>

00000c10 <__mulsf3_pse>:
 c10:	95 9f       	mul	r25, r21
 c12:	c1 f3       	breq	.-16     	; 0xc04 <__mulsf3+0x20>
 c14:	95 0f       	add	r25, r21
 c16:	50 e0       	ldi	r21, 0x00	; 0
 c18:	55 1f       	adc	r21, r21
 c1a:	62 9f       	mul	r22, r18
 c1c:	f0 01       	movw	r30, r0
 c1e:	72 9f       	mul	r23, r18
 c20:	bb 27       	eor	r27, r27
 c22:	f0 0d       	add	r31, r0
 c24:	b1 1d       	adc	r27, r1
 c26:	63 9f       	mul	r22, r19
 c28:	aa 27       	eor	r26, r26
 c2a:	f0 0d       	add	r31, r0
 c2c:	b1 1d       	adc	r27, r1
 c2e:	aa 1f       	adc	r26, r26
 c30:	64 9f       	mul	r22, r20
 c32:	66 27       	eor	r22, r22
 c34:	b0 0d       	add	r27, r0
 c36:	a1 1d       	adc	r26, r1
 c38:	66 1f       	adc	r22, r22
 c3a:	82 9f       	mul	r24, r18
 c3c:	22 27       	eor	r18, r18
 c3e:	b0 0d       	add	r27, r0
 c40:	a1 1d       	adc	r26, r1
 c42:	62 1f       	adc	r22, r18
 c44:	73 9f       	mul	r23, r19
 c46:	b0 0d       	add	r27, r0
 c48:	a1 1d       	adc	r26, r1
 c4a:	62 1f       	adc	r22, r18
 c4c:	83 9f       	mul	r24, r19
 c4e:	a0 0d       	add	r26, r0
 c50:	61 1d       	adc	r22, r1
 c52:	22 1f       	adc	r18, r18
 c54:	74 9f       	mul	r23, r20
 c56:	33 27       	eor	r19, r19
 c58:	a0 0d       	add	r26, r0
 c5a:	61 1d       	adc	r22, r1
 c5c:	23 1f       	adc	r18, r19
 c5e:	84 9f       	mul	r24, r20
 c60:	60 0d       	add	r22, r0
 c62:	21 1d       	adc	r18, r1
 c64:	82 2f       	mov	r24, r18
 c66:	76 2f       	mov	r23, r22
 c68:	6a 2f       	mov	r22, r26
 c6a:	11 24       	eor	r1, r1
 c6c:	9f 57       	subi	r25, 0x7F	; 127
 c6e:	50 40       	sbci	r21, 0x00	; 0
 c70:	9a f0       	brmi	.+38     	; 0xc98 <__mulsf3_pse+0x88>
 c72:	f1 f0       	breq	.+60     	; 0xcb0 <__mulsf3_pse+0xa0>
 c74:	88 23       	and	r24, r24
 c76:	4a f0       	brmi	.+18     	; 0xc8a <__mulsf3_pse+0x7a>
 c78:	ee 0f       	add	r30, r30
 c7a:	ff 1f       	adc	r31, r31
 c7c:	bb 1f       	adc	r27, r27
 c7e:	66 1f       	adc	r22, r22
 c80:	77 1f       	adc	r23, r23
 c82:	88 1f       	adc	r24, r24
 c84:	91 50       	subi	r25, 0x01	; 1
 c86:	50 40       	sbci	r21, 0x00	; 0
 c88:	a9 f7       	brne	.-22     	; 0xc74 <__mulsf3_pse+0x64>
 c8a:	9e 3f       	cpi	r25, 0xFE	; 254
 c8c:	51 05       	cpc	r21, r1
 c8e:	80 f0       	brcs	.+32     	; 0xcb0 <__mulsf3_pse+0xa0>
 c90:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_inf>
 c94:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_szero>
 c98:	5f 3f       	cpi	r21, 0xFF	; 255
 c9a:	e4 f3       	brlt	.-8      	; 0xc94 <__mulsf3_pse+0x84>
 c9c:	98 3e       	cpi	r25, 0xE8	; 232
 c9e:	d4 f3       	brlt	.-12     	; 0xc94 <__mulsf3_pse+0x84>
 ca0:	86 95       	lsr	r24
 ca2:	77 95       	ror	r23
 ca4:	67 95       	ror	r22
 ca6:	b7 95       	ror	r27
 ca8:	f7 95       	ror	r31
 caa:	e7 95       	ror	r30
 cac:	9f 5f       	subi	r25, 0xFF	; 255
 cae:	c1 f7       	brne	.-16     	; 0xca0 <__mulsf3_pse+0x90>
 cb0:	fe 2b       	or	r31, r30
 cb2:	88 0f       	add	r24, r24
 cb4:	91 1d       	adc	r25, r1
 cb6:	96 95       	lsr	r25
 cb8:	87 95       	ror	r24
 cba:	97 f9       	bld	r25, 7
 cbc:	08 95       	ret

00000cbe <eeprom_read_byte>:
 cbe:	f9 99       	sbic	0x1f, 1	; 31
 cc0:	fe cf       	rjmp	.-4      	; 0xcbe <eeprom_read_byte>
 cc2:	92 bd       	out	0x22, r25	; 34
 cc4:	81 bd       	out	0x21, r24	; 33
 cc6:	f8 9a       	sbi	0x1f, 0	; 31
 cc8:	99 27       	eor	r25, r25
 cca:	80 b5       	in	r24, 0x20	; 32
 ccc:	08 95       	ret

00000cce <eeprom_write_byte>:
 cce:	26 2f       	mov	r18, r22

00000cd0 <eeprom_write_r18>:
 cd0:	f9 99       	sbic	0x1f, 1	; 31
 cd2:	fe cf       	rjmp	.-4      	; 0xcd0 <eeprom_write_r18>
 cd4:	1f ba       	out	0x1f, r1	; 31
 cd6:	92 bd       	out	0x22, r25	; 34
 cd8:	81 bd       	out	0x21, r24	; 33
 cda:	20 bd       	out	0x20, r18	; 32
 cdc:	0f b6       	in	r0, 0x3f	; 63
 cde:	f8 94       	cli
 ce0:	fa 9a       	sbi	0x1f, 2	; 31
 ce2:	f9 9a       	sbi	0x1f, 1	; 31
 ce4:	0f be       	out	0x3f, r0	; 63
 ce6:	01 96       	adiw	r24, 0x01	; 1
 ce8:	08 95       	ret

00000cea <_exit>:
 cea:	f8 94       	cli

00000cec <__stop_program>:
 cec:	ff cf       	rjmp	.-2      	; 0xcec <__stop_program>
